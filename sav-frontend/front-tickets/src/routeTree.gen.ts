/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WorkflowRouteImport } from './routes/workflow'
import { Route as UsersRouteImport } from './routes/users'
import { Route as TicketsRouteImport } from './routes/tickets'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WorkflowUnassignedRouteImport } from './routes/workflow/unassigned'
import { Route as WorkflowAssignedRouteImport } from './routes/workflow/assigned'
import { Route as UsersIdRouteImport } from './routes/users/$id'
import { Route as TicketsMyTicketsRouteImport } from './routes/tickets/my-tickets'
import { Route as TicketsCreateRouteImport } from './routes/tickets/create'
import { Route as TicketsIdRouteImport } from './routes/tickets/$id'
import { Route as AdminUsersRouteImport } from './routes/admin/users'
import { Route as AdminStatisticsRouteImport } from './routes/admin/statistics'
import { Route as AdminSettingsRouteImport } from './routes/admin/settings'
import { Route as AdminDashboardRouteImport } from './routes/admin/dashboard'
import { Route as WorkflowPriorityHighRouteImport } from './routes/workflow/priority/high'
import { Route as WorkflowPriorityCriticalRouteImport } from './routes/workflow/priority/critical'
import { Route as UsersIdEditRouteImport } from './routes/users/$id/edit'

const WorkflowRoute = WorkflowRouteImport.update({
  id: '/workflow',
  path: '/workflow',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersRoute = UsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRouteImport,
} as any)
const TicketsRoute = TicketsRouteImport.update({
  id: '/tickets',
  path: '/tickets',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkflowUnassignedRoute = WorkflowUnassignedRouteImport.update({
  id: '/unassigned',
  path: '/unassigned',
  getParentRoute: () => WorkflowRoute,
} as any)
const WorkflowAssignedRoute = WorkflowAssignedRouteImport.update({
  id: '/assigned',
  path: '/assigned',
  getParentRoute: () => WorkflowRoute,
} as any)
const UsersIdRoute = UsersIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => UsersRoute,
} as any)
const TicketsMyTicketsRoute = TicketsMyTicketsRouteImport.update({
  id: '/my-tickets',
  path: '/my-tickets',
  getParentRoute: () => TicketsRoute,
} as any)
const TicketsCreateRoute = TicketsCreateRouteImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => TicketsRoute,
} as any)
const TicketsIdRoute = TicketsIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => TicketsRoute,
} as any)
const AdminUsersRoute = AdminUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AdminRoute,
} as any)
const AdminStatisticsRoute = AdminStatisticsRouteImport.update({
  id: '/statistics',
  path: '/statistics',
  getParentRoute: () => AdminRoute,
} as any)
const AdminSettingsRoute = AdminSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AdminRoute,
} as any)
const AdminDashboardRoute = AdminDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AdminRoute,
} as any)
const WorkflowPriorityHighRoute = WorkflowPriorityHighRouteImport.update({
  id: '/priority/high',
  path: '/priority/high',
  getParentRoute: () => WorkflowRoute,
} as any)
const WorkflowPriorityCriticalRoute =
  WorkflowPriorityCriticalRouteImport.update({
    id: '/priority/critical',
    path: '/priority/critical',
    getParentRoute: () => WorkflowRoute,
  } as any)
const UsersIdEditRoute = UsersIdEditRouteImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => UsersIdRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/settings': typeof SettingsRoute
  '/tickets': typeof TicketsRouteWithChildren
  '/users': typeof UsersRouteWithChildren
  '/workflow': typeof WorkflowRouteWithChildren
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/settings': typeof AdminSettingsRoute
  '/admin/statistics': typeof AdminStatisticsRoute
  '/admin/users': typeof AdminUsersRoute
  '/tickets/$id': typeof TicketsIdRoute
  '/tickets/create': typeof TicketsCreateRoute
  '/tickets/my-tickets': typeof TicketsMyTicketsRoute
  '/users/$id': typeof UsersIdRouteWithChildren
  '/workflow/assigned': typeof WorkflowAssignedRoute
  '/workflow/unassigned': typeof WorkflowUnassignedRoute
  '/users/$id/edit': typeof UsersIdEditRoute
  '/workflow/priority/critical': typeof WorkflowPriorityCriticalRoute
  '/workflow/priority/high': typeof WorkflowPriorityHighRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/settings': typeof SettingsRoute
  '/tickets': typeof TicketsRouteWithChildren
  '/users': typeof UsersRouteWithChildren
  '/workflow': typeof WorkflowRouteWithChildren
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/settings': typeof AdminSettingsRoute
  '/admin/statistics': typeof AdminStatisticsRoute
  '/admin/users': typeof AdminUsersRoute
  '/tickets/$id': typeof TicketsIdRoute
  '/tickets/create': typeof TicketsCreateRoute
  '/tickets/my-tickets': typeof TicketsMyTicketsRoute
  '/users/$id': typeof UsersIdRouteWithChildren
  '/workflow/assigned': typeof WorkflowAssignedRoute
  '/workflow/unassigned': typeof WorkflowUnassignedRoute
  '/users/$id/edit': typeof UsersIdEditRoute
  '/workflow/priority/critical': typeof WorkflowPriorityCriticalRoute
  '/workflow/priority/high': typeof WorkflowPriorityHighRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/settings': typeof SettingsRoute
  '/tickets': typeof TicketsRouteWithChildren
  '/users': typeof UsersRouteWithChildren
  '/workflow': typeof WorkflowRouteWithChildren
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/settings': typeof AdminSettingsRoute
  '/admin/statistics': typeof AdminStatisticsRoute
  '/admin/users': typeof AdminUsersRoute
  '/tickets/$id': typeof TicketsIdRoute
  '/tickets/create': typeof TicketsCreateRoute
  '/tickets/my-tickets': typeof TicketsMyTicketsRoute
  '/users/$id': typeof UsersIdRouteWithChildren
  '/workflow/assigned': typeof WorkflowAssignedRoute
  '/workflow/unassigned': typeof WorkflowUnassignedRoute
  '/users/$id/edit': typeof UsersIdEditRoute
  '/workflow/priority/critical': typeof WorkflowPriorityCriticalRoute
  '/workflow/priority/high': typeof WorkflowPriorityHighRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/dashboard'
    | '/login'
    | '/settings'
    | '/tickets'
    | '/users'
    | '/workflow'
    | '/admin/dashboard'
    | '/admin/settings'
    | '/admin/statistics'
    | '/admin/users'
    | '/tickets/$id'
    | '/tickets/create'
    | '/tickets/my-tickets'
    | '/users/$id'
    | '/workflow/assigned'
    | '/workflow/unassigned'
    | '/users/$id/edit'
    | '/workflow/priority/critical'
    | '/workflow/priority/high'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/dashboard'
    | '/login'
    | '/settings'
    | '/tickets'
    | '/users'
    | '/workflow'
    | '/admin/dashboard'
    | '/admin/settings'
    | '/admin/statistics'
    | '/admin/users'
    | '/tickets/$id'
    | '/tickets/create'
    | '/tickets/my-tickets'
    | '/users/$id'
    | '/workflow/assigned'
    | '/workflow/unassigned'
    | '/users/$id/edit'
    | '/workflow/priority/critical'
    | '/workflow/priority/high'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/dashboard'
    | '/login'
    | '/settings'
    | '/tickets'
    | '/users'
    | '/workflow'
    | '/admin/dashboard'
    | '/admin/settings'
    | '/admin/statistics'
    | '/admin/users'
    | '/tickets/$id'
    | '/tickets/create'
    | '/tickets/my-tickets'
    | '/users/$id'
    | '/workflow/assigned'
    | '/workflow/unassigned'
    | '/users/$id/edit'
    | '/workflow/priority/critical'
    | '/workflow/priority/high'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  DashboardRoute: typeof DashboardRoute
  LoginRoute: typeof LoginRoute
  SettingsRoute: typeof SettingsRoute
  TicketsRoute: typeof TicketsRouteWithChildren
  UsersRoute: typeof UsersRouteWithChildren
  WorkflowRoute: typeof WorkflowRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/workflow': {
      id: '/workflow'
      path: '/workflow'
      fullPath: '/workflow'
      preLoaderRoute: typeof WorkflowRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tickets': {
      id: '/tickets'
      path: '/tickets'
      fullPath: '/tickets'
      preLoaderRoute: typeof TicketsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workflow/unassigned': {
      id: '/workflow/unassigned'
      path: '/unassigned'
      fullPath: '/workflow/unassigned'
      preLoaderRoute: typeof WorkflowUnassignedRouteImport
      parentRoute: typeof WorkflowRoute
    }
    '/workflow/assigned': {
      id: '/workflow/assigned'
      path: '/assigned'
      fullPath: '/workflow/assigned'
      preLoaderRoute: typeof WorkflowAssignedRouteImport
      parentRoute: typeof WorkflowRoute
    }
    '/users/$id': {
      id: '/users/$id'
      path: '/$id'
      fullPath: '/users/$id'
      preLoaderRoute: typeof UsersIdRouteImport
      parentRoute: typeof UsersRoute
    }
    '/tickets/my-tickets': {
      id: '/tickets/my-tickets'
      path: '/my-tickets'
      fullPath: '/tickets/my-tickets'
      preLoaderRoute: typeof TicketsMyTicketsRouteImport
      parentRoute: typeof TicketsRoute
    }
    '/tickets/create': {
      id: '/tickets/create'
      path: '/create'
      fullPath: '/tickets/create'
      preLoaderRoute: typeof TicketsCreateRouteImport
      parentRoute: typeof TicketsRoute
    }
    '/tickets/$id': {
      id: '/tickets/$id'
      path: '/$id'
      fullPath: '/tickets/$id'
      preLoaderRoute: typeof TicketsIdRouteImport
      parentRoute: typeof TicketsRoute
    }
    '/admin/users': {
      id: '/admin/users'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/statistics': {
      id: '/admin/statistics'
      path: '/statistics'
      fullPath: '/admin/statistics'
      preLoaderRoute: typeof AdminStatisticsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/settings': {
      id: '/admin/settings'
      path: '/settings'
      fullPath: '/admin/settings'
      preLoaderRoute: typeof AdminSettingsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/dashboard': {
      id: '/admin/dashboard'
      path: '/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardRouteImport
      parentRoute: typeof AdminRoute
    }
    '/workflow/priority/high': {
      id: '/workflow/priority/high'
      path: '/priority/high'
      fullPath: '/workflow/priority/high'
      preLoaderRoute: typeof WorkflowPriorityHighRouteImport
      parentRoute: typeof WorkflowRoute
    }
    '/workflow/priority/critical': {
      id: '/workflow/priority/critical'
      path: '/priority/critical'
      fullPath: '/workflow/priority/critical'
      preLoaderRoute: typeof WorkflowPriorityCriticalRouteImport
      parentRoute: typeof WorkflowRoute
    }
    '/users/$id/edit': {
      id: '/users/$id/edit'
      path: '/edit'
      fullPath: '/users/$id/edit'
      preLoaderRoute: typeof UsersIdEditRouteImport
      parentRoute: typeof UsersIdRoute
    }
  }
}

interface AdminRouteChildren {
  AdminDashboardRoute: typeof AdminDashboardRoute
  AdminSettingsRoute: typeof AdminSettingsRoute
  AdminStatisticsRoute: typeof AdminStatisticsRoute
  AdminUsersRoute: typeof AdminUsersRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminDashboardRoute: AdminDashboardRoute,
  AdminSettingsRoute: AdminSettingsRoute,
  AdminStatisticsRoute: AdminStatisticsRoute,
  AdminUsersRoute: AdminUsersRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

interface TicketsRouteChildren {
  TicketsIdRoute: typeof TicketsIdRoute
  TicketsCreateRoute: typeof TicketsCreateRoute
  TicketsMyTicketsRoute: typeof TicketsMyTicketsRoute
}

const TicketsRouteChildren: TicketsRouteChildren = {
  TicketsIdRoute: TicketsIdRoute,
  TicketsCreateRoute: TicketsCreateRoute,
  TicketsMyTicketsRoute: TicketsMyTicketsRoute,
}

const TicketsRouteWithChildren =
  TicketsRoute._addFileChildren(TicketsRouteChildren)

interface UsersIdRouteChildren {
  UsersIdEditRoute: typeof UsersIdEditRoute
}

const UsersIdRouteChildren: UsersIdRouteChildren = {
  UsersIdEditRoute: UsersIdEditRoute,
}

const UsersIdRouteWithChildren =
  UsersIdRoute._addFileChildren(UsersIdRouteChildren)

interface UsersRouteChildren {
  UsersIdRoute: typeof UsersIdRouteWithChildren
}

const UsersRouteChildren: UsersRouteChildren = {
  UsersIdRoute: UsersIdRouteWithChildren,
}

const UsersRouteWithChildren = UsersRoute._addFileChildren(UsersRouteChildren)

interface WorkflowRouteChildren {
  WorkflowAssignedRoute: typeof WorkflowAssignedRoute
  WorkflowUnassignedRoute: typeof WorkflowUnassignedRoute
  WorkflowPriorityCriticalRoute: typeof WorkflowPriorityCriticalRoute
  WorkflowPriorityHighRoute: typeof WorkflowPriorityHighRoute
}

const WorkflowRouteChildren: WorkflowRouteChildren = {
  WorkflowAssignedRoute: WorkflowAssignedRoute,
  WorkflowUnassignedRoute: WorkflowUnassignedRoute,
  WorkflowPriorityCriticalRoute: WorkflowPriorityCriticalRoute,
  WorkflowPriorityHighRoute: WorkflowPriorityHighRoute,
}

const WorkflowRouteWithChildren = WorkflowRoute._addFileChildren(
  WorkflowRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  DashboardRoute: DashboardRoute,
  LoginRoute: LoginRoute,
  SettingsRoute: SettingsRoute,
  TicketsRoute: TicketsRouteWithChildren,
  UsersRoute: UsersRouteWithChildren,
  WorkflowRoute: WorkflowRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
